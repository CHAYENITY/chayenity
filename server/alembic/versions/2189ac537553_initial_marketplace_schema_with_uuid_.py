"""Initial marketplace schema with UUID primary keys

Revision ID: 2189ac537553
Revises:
Create Date: 2025-09-21 01:23:51.035871

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "2189ac537553"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "category",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sqlmodel.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_category_name"), "category", ["name"], unique=True)
    op.create_table(
        "user",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("email", sqlmodel.AutoString(), nullable=False),
        sa.Column("hashed_password", sqlmodel.AutoString(), nullable=False),
        sa.Column("full_name", sqlmodel.AutoString(), nullable=False),
        sa.Column("profile_image_url", sqlmodel.AutoString(), nullable=True),
        sa.Column("contact_info", sqlmodel.AutoString(), nullable=True),
        sa.Column("address_text", sqlmodel.AutoString(), nullable=True),
        sa.Column("latitude", sa.Float(), nullable=True),
        sa.Column("longitude", sa.Float(), nullable=True),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.Column("reputation_score", sa.Float(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=True)
    op.create_table(
        "item",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("title", sqlmodel.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.AutoString(), nullable=False),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column(
            "condition",
            sa.Enum("NEW", "USED_LIKE_NEW", "USED_GOOD", "USED_FAIR", name="itemcondition"),
            nullable=False,
        ),
        sa.Column(
            "status", sa.Enum("AVAILABLE", "RESERVED", "SOLD", name="itemstatus"), nullable=False
        ),
        sa.Column("latitude", sa.Float(), nullable=False),
        sa.Column("longitude", sa.Float(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("category_id", sa.Uuid(), nullable=False),
        sa.Column("owner_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["category.id"],
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_item_category_id"), "item", ["category_id"], unique=False)
    op.create_index(op.f("ix_item_created_at"), "item", ["created_at"], unique=False)
    op.create_index(op.f("ix_item_owner_id"), "item", ["owner_id"], unique=False)
    op.create_index(op.f("ix_item_price"), "item", ["price"], unique=False)
    op.create_index(op.f("ix_item_status"), "item", ["status"], unique=False)
    op.create_index(op.f("ix_item_title"), "item", ["title"], unique=False)
    op.create_table(
        "notification",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("title", sqlmodel.AutoString(), nullable=False),
        sa.Column("message", sqlmodel.AutoString(), nullable=False),
        sa.Column(
            "type",
            sa.Enum(
                "NEW_MESSAGE",
                "ITEM_INTEREST",
                "PRICE_CHANGE",
                "REVIEW_RECEIVED",
                "REPORT_RESPONSE",
                name="notificationtype",
            ),
            nullable=False,
        ),
        sa.Column("is_read", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column(
            "extra_data",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'{}'::jsonb"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_notification_is_read"), "notification", ["is_read"], unique=False)
    op.create_index(op.f("ix_notification_type"), "notification", ["type"], unique=False)
    op.create_index(op.f("ix_notification_user_id"), "notification", ["user_id"], unique=False)
    op.create_table(
        "report",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("reporter_id", sa.Uuid(), nullable=False),
        sa.Column("reported_user_id", sa.Uuid(), nullable=False),
        sa.Column(
            "reason",
            sa.Enum("SPAM", "INAPPROPRIATE", "SCAM", "FAKE_ITEM", "OTHER", name="reporttype"),
            nullable=False,
        ),
        sa.Column("description", sqlmodel.AutoString(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["reported_user_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["reporter_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "wanteditem",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("title", sqlmodel.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.AutoString(), nullable=True),
        sa.Column("category_id", sa.Uuid(), nullable=True),
        sa.Column("max_price", sa.Float(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["category.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "conversation",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("item_id", sa.Uuid(), nullable=False),
        sa.Column("user1_id", sa.Uuid(), nullable=False),
        sa.Column("user2_id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["item_id"],
            ["item.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user1_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user2_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "favorite",
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("item_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["item_id"],
            ["item.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "item_id"),
    )
    op.create_table(
        "itemimage",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("image_url", sqlmodel.AutoString(), nullable=False),
        sa.Column("item_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["item_id"],
            ["item.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "review",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("rating", sa.Integer(), nullable=False),
        sa.Column("comment", sqlmodel.AutoString(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("reviewer_id", sa.Uuid(), nullable=False),
        sa.Column("reviewee_id", sa.Uuid(), nullable=False),
        sa.Column("item_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["item_id"],
            ["item.id"],
        ),
        sa.ForeignKeyConstraint(
            ["reviewee_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["reviewer_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "transaction",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("item_id", sa.Uuid(), nullable=False),
        sa.Column("buyer_id", sa.Uuid(), nullable=False),
        sa.Column("seller_id", sa.Uuid(), nullable=False),
        sa.Column("amount", sa.Float(), nullable=False),
        sa.Column("currency", sqlmodel.AutoString(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("PENDING", "COMPLETED", "CANCELLED", "FAILED", name="transactionstatus"),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("completed_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["buyer_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["item_id"],
            ["item.id"],
        ),
        sa.ForeignKeyConstraint(
            ["seller_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_transaction_buyer_id"), "transaction", ["buyer_id"], unique=False)
    op.create_index(op.f("ix_transaction_item_id"), "transaction", ["item_id"], unique=False)
    op.create_index(op.f("ix_transaction_seller_id"), "transaction", ["seller_id"], unique=False)
    op.create_index(op.f("ix_transaction_status"), "transaction", ["status"], unique=False)
    op.create_table(
        "message",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("content", sqlmodel.AutoString(), nullable=False),
        sa.Column("image_url", sqlmodel.AutoString(), nullable=True),
        sa.Column("is_read", sa.Boolean(), nullable=False),
        sa.Column("is_unsent", sa.Boolean(), nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.Column("conversation_id", sa.Uuid(), nullable=False),
        sa.Column("sender_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["conversation_id"],
            ["conversation.id"],
        ),
        sa.ForeignKeyConstraint(
            ["sender_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_message_conversation_id"), "message", ["conversation_id"], unique=False
    )
    op.create_index(op.f("ix_message_is_read"), "message", ["is_read"], unique=False)
    op.create_index(op.f("ix_message_sender_id"), "message", ["sender_id"], unique=False)
    op.create_index(op.f("ix_message_timestamp"), "message", ["timestamp"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_message_timestamp"), table_name="message")
    op.drop_index(op.f("ix_message_sender_id"), table_name="message")
    op.drop_index(op.f("ix_message_is_read"), table_name="message")
    op.drop_index(op.f("ix_message_conversation_id"), table_name="message")
    op.drop_table("message")
    op.drop_index(op.f("ix_transaction_status"), table_name="transaction")
    op.drop_index(op.f("ix_transaction_seller_id"), table_name="transaction")
    op.drop_index(op.f("ix_transaction_item_id"), table_name="transaction")
    op.drop_index(op.f("ix_transaction_buyer_id"), table_name="transaction")
    op.drop_table("transaction")
    op.drop_table("review")
    op.drop_table("itemimage")
    op.drop_table("favorite")
    op.drop_table("conversation")
    op.drop_table("wanteditem")
    op.drop_table("report")
    op.drop_index(op.f("ix_notification_user_id"), table_name="notification")
    op.drop_index(op.f("ix_notification_type"), table_name="notification")
    op.drop_index(op.f("ix_notification_is_read"), table_name="notification")
    op.drop_table("notification")
    op.drop_index(op.f("ix_item_title"), table_name="item")
    op.drop_index(op.f("ix_item_status"), table_name="item")
    op.drop_index(op.f("ix_item_price"), table_name="item")
    op.drop_index(op.f("ix_item_owner_id"), table_name="item")
    op.drop_index(op.f("ix_item_created_at"), table_name="item")
    op.drop_index(op.f("ix_item_category_id"), table_name="item")
    op.drop_table("item")
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.drop_table("user")
    op.drop_index(op.f("ix_category_name"), table_name="category")
    op.drop_table("category")
    # ### end Alembic commands ###
